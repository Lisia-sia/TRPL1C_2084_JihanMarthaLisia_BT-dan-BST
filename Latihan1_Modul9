class Node<T> {
  T key;
  Node<T>? left, right;
  Node(this.key);
}

// Kelas BinaryTree dengan method rekursif untuk menghitung kedalaman
class BinaryTree<T> {
  Node<T>? root;

  // Fungsi rekursif untuk menghitung kedalaman (maksimum level node)
  int maxDepth(Node<T>? node) {
    if (node == null) return 0;
    int leftDepth = maxDepth(node.left);
    int rightDepth = maxDepth(node.right);
    return (leftDepth > rightDepth ? leftDepth : rightDepth) + 1;
  }
}

void main() {
  // Membangun tree sesuai dengan Gambar 9
  BinaryTree<int> tree = BinaryTree();
  tree.root = Node(10);
  tree.root!.left = Node(20);
  tree.root!.right = Node(30);
  tree.root!.right!.left = Node(4);

  // Hitung dan cetak kedalaman Binary Tree
  int kedalaman = tree.maxDepth(tree.root);
  print("Kedalaman Binary Tree adalah: $kedalaman");
}
